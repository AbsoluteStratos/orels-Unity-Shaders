%Properties()
{
    UI_OutlineHeader("# Outline", Int) = 0
    [Toggle(OUTLINE_ENABLED)]_Outline("Enable Outline", Int) = 0
    [HDR]_OutlineColor("Color %ShowIf(OUTLINE_ENABLED)", Color) = (0.5, 0.5, 0.5, 1)
    [Enum(Lit, 0, Emissive, 1)]_OutlineLightingMode("Lighting Mode %ShowIf(OUTLINE_ENABLED)", Int) = 0
    _OutlineAlbedoTint("Albedo Tint %ShowIf(OUTLINE_ENABLED)", Range(0, 1)) = 0
    _OutlineMask("Width Mask %ShowIf(OUTLINE_ENABLED)", 2D) = "white" {}
    _OutlineWidth("Width %ShowIf(OUTLINE_ENABLED)", Range(0, 5)) = 1
}

%ShaderFeatures()
{
    #pragma shader_feature_local OUTLINE_ENABLED
}

%Variables()
{
    half4 _OutlineColor;
    int _OutlineLightingMode;
    half _OutlineAlbedoTint;
    half _OutlineWidth;
}

%Textures()
{
    TEXTURE2D(_OutlineMask);
    SAMPLER(sampler_OutlineMask);
}

%Vertex("ToonOutlineVertex")
{
    void ToonOutlineVertex(inout VertexData v) {
        #if defined(PASS_OUTLINE)
        half mask = SAMPLE_TEXTURE2D_LOD(_OutlineMask, sampler_OutlineMask, v.uv0, 0);
        half3 width = mask * _OutlineWidth * .01;
        width *= min(distance(mul(unity_ObjectToWorld, v.vertex), _WorldSpaceCameraPos) * 3, 1);
        v.vertex.xyz += v.normal.xyz * width;
        #endif
    }
}

%Fragment("ToonOutlineFragment")
{
    void ToonOutlineFragment(inout SurfaceData o) {
        o.OutlineColor = lerp(_OutlineColor, _OutlineColor * o.Albedo, _OutlineAlbedoTint);
        o.OutlineLightingMode = _OutlineLightingMode;
    }
}
