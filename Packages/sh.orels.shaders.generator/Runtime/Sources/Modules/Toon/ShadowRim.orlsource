%Properties()
{
    [ToggleUI]UI_RimShadowHeader("# Rim Shadow Settings", Int) = 0
    _ShadowRimTint("Tint", Color) = (1,1,1,1)
    _ShadowRimRange("Range", Range(0,1)) = 0.7
    _ShadowRimThreshold("Threshold", Range(0,1)) = 0.1
    _ShadowRimSharpness("Sarpness", Range(0,1)) = 0.3
    _ShadowRimAlbedoTint("Albedo Tint", Range(0,1)) = 0
}

%Variables()
{
    half4 _ShadowRimTint;
    half _ShadowRimRange;
    half _ShadowRimThreshold;
    half _ShadowRimSharpness;
    half _ShadowRimAlbedoTint;
}

%Fragment("ToonShadowRimFragment")
{
    void ToonShadowRimFragment(MeshData d, inout SurfaceData o) {
        #ifndef USING_DIRECTIONAL_LIGHT
            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(d.worldSpacePosition));
        #else
            fixed3 lightDir = _WorldSpaceLightPos0.xyz;
        #endif
        bool lightEnv = any(lightDir.xyz);
        if (!lightEnv) {
            lightDir = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
        }
        half lightNoL = saturate(dot(GLOBAL_pixelNormal, lightDir));
        half SVDNoN = abs(dot(d.svdn, GLOBAL_pixelNormal));
        half shadowRimIntensity = saturate((1 - SVDNoN)) * pow(1 - lightNoL, _ShadowRimThreshold * 2);
        shadowRimIntensity = smoothstep(_ShadowRimRange - _ShadowRimSharpness, _ShadowRimRange + _ShadowRimSharpness, shadowRimIntensity);

        o.RimShadow = lerp(1, (_ShadowRimTint * lerp(1, o.Albedo.rgbb, _ShadowRimAlbedoTint)), shadowRimIntensity);
    }
}