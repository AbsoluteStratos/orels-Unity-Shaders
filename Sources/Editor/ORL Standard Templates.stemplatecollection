#T#ShaderFeatures
#pragma shader_feature_local BICUBIC_LIGHTMAP
#pragma shader_feature_local BAKED_SPECULAR
#pragma shader_feature_local GSAA
#pragma shader_feature_local FORCE_BOX_PROJECTION

#T#ShaderDefines
#if defined(UNITY_PBS_USE_BRDF2) || defined(SHADER_API_MOBILE)
  #define PLAT_QUEST
#else
  #ifdef PLAT_QUEST
    #undef PLAT_QUEST
  #endif
#endif

#T#VertexFunction
#if defined(UNITY_PASS_SHADOWCASTER)
  i.worldNormal= UnityObjectToWorldNormal(v.normal);
  i.worldPos   = mul(unity_ObjectToWorld, v.vertex);		
  i.uv0        = v.uv0;
  i.uv1        = v.uv1;
  i.uv2        = v.uv2;
  i.uv3        = v.uv3;
  i.worldTangent.xyz = UnityObjectToWorldDir(v.tangent.xyz);
  i.worldTangent.w = v.tangent.w * unity_WorldTransformParams.w;
#else
  #if defined(UNITY_PASS_META)
    i.pos = UnityMetaVertexPosition(v.vertex, v.uv1.xy, v.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);
  #else
    i.pos        = UnityObjectToClipPos(v.vertex);
  #endif
  i.normal     = v.normal;
  i.worldNormal= UnityObjectToWorldNormal(v.normal);
  i.worldPos   = mul(unity_ObjectToWorld, v.vertex);		
  i.uv0        = v.uv0;
  i.uv1        = v.uv1;
  i.uv2        = v.uv2;
  i.uv3        = v.uv3;
  i.worldTangent.xyz = UnityObjectToWorldDir(v.tangent.xyz);
  i.worldTangent.w = v.tangent.w * unity_WorldTransformParams.w;
  i.vertexColor = v.color;

  #if defined(EDITOR_VISUALIZATION)
    o.vizUV = 0;
    o.lightCoord = 0;
    if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
      o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.uv0.xy, v.uv1.xy, v.uv2.xy, unity_EditorViz_Texture_ST);
    else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
    {
      o.vizUV = v.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
      o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
    }
  #endif

  #if !defined(UNITY_PASS_META)
    #if defined(LIGHTMAP_ON)
      i.lightmapUv.xy = v.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    #endif
    #if defined(DYNAMICLIGHTMAP_ON)
      i.lightmapUv.zw = v.uv2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    #endif

    UNITY_TRANSFER_LIGHTING(i, v.uv1.xy);

    #if !defined(UNITY_PASS_FORWARDADD)
      // unity does some funky stuff for different platforms with these macros
      #ifdef FOG_COMBINED_WITH_TSPACE
        UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(i,i.pos);
      #elif defined (FOG_COMBINED_WITH_WORLD_POS)
        UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(i,i.pos);
      #else
        UNITY_TRANSFER_FOG(i,i.pos);
      #endif
    #else
      UNITY_TRANSFER_FOG(i,i.pos);
    #endif
  #endif
#endif

#T#LightingBase
void ORLLighting() {
  half reflectance = 0.5;
  half3 f0 = 0.16 * reflectance * reflectance * (1 - o.Metallic) + o.Albedo * o.Metallic;
  half3 pixelLight = 0;
  half3 indirectDiffuse = 1;
  half3 indirectSpecular = 0;
  half3 directSpecular = 0;
  half occlusion = o.Occlusion;
  half perceptualRoughness = 1 - o.Smoothness;
  o.Normal = normalize(mul(o.Normal, d.TBNMatrix));

  #ifndef USING_DIRECTIONAL_LIGHT
    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(d.worldSpacePosition));
  #else
    fixed3 lightDir = _WorldSpaceLightPos0.xyz;
  #endif
  
  #if defined(GSAA)
    perceptualRoughness = GSAA_Filament(o.Normal, perceptualRoughness, _GSAAVariance, _GSAAThreshold);
  #endif
      
  UNITY_LIGHT_ATTENUATION(lightAttenuation, FragData, d.worldSpacePosition);
  half3 lightColor = lightAttenuation * _LightColor0.rgb;
  
  half3 lightHalfVector = Unity_SafeNormalize(lightDir + d.worldSpaceViewDir);
  half lightNoL = saturate(dot(o.Normal, lightDir));
  half lightLoH = saturate(dot(lightDir, lightHalfVector));
  
  half NoV = abs(dot(o.Normal, d.worldSpaceViewDir)) + 1e-5;
  pixelLight = lightNoL * lightColor * Fd_Burley(perceptualRoughness, NoV, lightNoL, lightLoH);
  
  // READ THE LIGHTMAP
  #if defined(LIGHTMAP_ON) && !defined(UNITY_PASS_FORWARDADD)
    half3 lightMap = 0;
    half4 bakedColorTex = 0;
    half2 lightmapUV = FragData.lightmapUv.xy;
    
    // UNITY LIGHTMAPPING
    #if !defined(BAKERYLM_ENABLED) || !defined(BAKERY_ENABLED)
      lightMap = tex2DFastBicubicLightmap(lightmapUV, bakedColorTex);
    #endif
    
    // BAKERY RNM MODE (why do we even support it??)
    #if defined(BAKERY_RNM) && defined(BAKERY_ENABLED)
      half3 rnm0 = DecodeLightmap(BakeryTex2D(_RNM0, lightmapUV, _RNM0_TexelSize));
      half3 rnm1 = DecodeLightmap(BakeryTex2D(_RNM1, lightmapUV, _RNM0_TexelSize));
      half3 rnm2 = DecodeLightmap(BakeryTex2D(_RNM2, lightmapUV, _RNM0_TexelSize));
      
      lightMap = saturate(dot(rnmBasis0, tangentNormal)) *  rnm0 + 
                  saturate(dot(rnmBasis1, tangentNormal)) *  rnm1 +
                  saturate(dot(rnmBasis2, tangentNormal)) *  rnm2;
    #endif
    
    // BAKERY SH MODE (these are also used for the specular)
    #if defined(BAKERY_SH) && defined(BAKERY_ENABLED)
      half3 L0 = DecodeLightmap(BakeryTex2D(unity_Lightmap, samplerunity_Lightmap, lightmapUV, _RNM0_TexelSize));
      
      half3 nL1x = BakeryTex2D(_RNM0, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
      half3 nL1y = BakeryTex2D(_RNM1, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
      half3 nL1z = BakeryTex2D(_RNM2, lightmapUV, _RNM0_TexelSize) * 2.0 - 1.0;
      half3 L1x = nL1x * L0 * 2.0;
      half3 L1y = nL1y * L0 * 2.0;
      half3 L1z = nL1z * L0 * 2.0;
      
      // Non-Linear mode
      #if defined(BAKERY_SHNONLINEAR)
        half lumaL0 = dot(L0, half(1));
        half lumaL1x = dot(L1x, half(1));
        half lumaL1y = dot(L1y, half(1));
        half lumaL1z = dot(L1z, half(1));
        half lumaSH = shEvaluateDiffuseL1Geomerics_local(lumaL0, half3(lumaL1x, lumaL1y, lumaL1z), o.Normal);
        
        lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
        half regularLumaSH = dot(lightMap, 1.0);
        lightMap *= lerp(1.0, lumaSH / regularLumaSH, saturate(regularLumaSH * 16.0));
      #else
      lightMap = L0 + o.Normal.x * L1x + o.Normal.y * L1y + o.Normal.z * L1z;
      #endif
      
    #endif
    
    #if defined(DIRLIGHTMAP_COMBINED)
        half4 lightMapDirection = UNITY_SAMPLE_TEX2D_SAMPLER (unity_LightmapInd, unity_Lightmap, lightmapUV);
        lightMap = DecodeDirectionalLightmap(lightMap, lightMapDirection, o.Normal);
    #endif
    
    #if defined(DYNAMICLIGHTMAP_ON) && !defined(UNITY_PBS_USE_BRDF2)
        half3 realtimeLightMap = getRealtimeLightmap(FragData.lightmapUv.zw, o.Normal);
        lightMap += realtimeLightMap; 
    #endif
    
    #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        pixelLight = 0;
        lightMap = SubtractMainLightWithRealtimeAttenuationFrowmLightmap (lightMap, lightAttenuation, bakedColorTex, o.Normal);
    #endif
    indirectDiffuse = lightMap;
  #else
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      UNITY_BRANCH
      if (unity_ProbeVolumeParams.x == 1) {
        indirectDiffuse = SHEvalLinearL0L1_SampleProbeVolume(half4(o.Normal, 1), FragData.worldPos);
      }
      else {
    #endif
        indirectDiffuse = max(0, ShadeSH9(half4(o.Normal, 1)));
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      }
    #endif
  #endif
  
  #if defined(LIGHTMAP_SHADOW_MIXING) && defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) && defined(LIGHTMAP_ON) && !defined(UNITY_PASS_FORWARDADD)
    pixelLight *= UnityComputeForwardShadows(FragData.lightmapUv.xy, d.worldSpacePosition, d.screenPos);
  #endif
  
  
  half3 dfguv = half3(NoV, perceptualRoughness, 0);
  half2 dfg = SAMPLE_TEXTURE2D(_DFG, sampler_DFG, dfguv).xy;
  half3 energyCompensation = 1.0 + f0 * (1.0 / dfg.y - 1.0);
  
  half rough = perceptualRoughness * perceptualRoughness;
  half clampedRoughness = max(rough, 0.002);
  
  #if !defined(SPECULAR_HIGHLIGHTS_OFF) && defined(USING_LIGHT_MULTI_COMPILE)
    half NoH = saturate(dot(o.Normal, lightHalfVector));
    half3 F = F_Schlick(lightLoH, f0);
    half D = D_GGX(NoH, clampedRoughness);
    half V = V_SmithGGXCorrelated(NoV, lightNoL, clampedRoughness);
    
    F *= energyCompensation;
        
    directSpecular = max(0, D * V * F) * pixelLight * UNITY_PI;
  #endif

  // BAKED SPECULAR
  #if defined(BAKED_SPECULAR) && !defined(BAKERYLM_ENABLED) && !defined(UNITY_PASS_FORWARDADD)
  {
    half3 bakedDominantDirection = 1;
    half3 bakedSpecularColor = 0;
    
    // only do it if we have a directional lightmap
    #if defined(DIRLIGHTMAP_COMBINED) && defined(LIGHTMAP_ON)
      bakedDominantDirection = (lightMapDirection.xyz) * 2 - 1;
      half directionality = max(0.001, length(bakedDominantDirection));
      bakedDominantDirection /= directionality;
      bakedSpecularColor = indirectDiffuse;
    #endif
    
    // if we do not have lightmap - derive the specular from probes
    //#ifndef LIGHTMAP_ON
      //bakedSpecularColor = half3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
      //bakedDominantDirection = unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz;
    // #endif
    
    bakedDominantDirection = normalize(bakedDominantDirection);
    directSpecular += GetSpecularHighlights(o.Normal, bakedSpecularColor, bakedDominantDirection, f0, d.worldSpaceViewDir, lerp(1, clampedRoughness, _SpecularRoughnessMod), NoV, energyCompensation);
  }
  #endif
  
  half3 fresnel = F_Schlick(NoV, f0);
  
  // BAKERY DIRECT SPECULAR
  #if defined(BAKERY_LMSPEC) && defined(BAKERY_ENABLED) && !defined(UNITY_PASS_FORWARDADD)
    #if defined(BAKERY_RNM)
    {
      half3 viewDirTangent = -normalize(d.tangentSpaceViewDir);
      half3 dominantDirTangent = rnmBasis0 * dot(rnm0, lumaConv) +
                                  rnmBasis1 * dot(rnm1, lumaConv) +
                                  rnmBasis2 * dot(rnm2, lumaConv);
                                  
      half3 dominantDirTangentNormalized = normalize(dominantDirTangent);
      half3 specColor = saturate(dot(rnmBasis0, dominantDirTangentNormalized)) * rnm0 +
                        saturate(dot(rnmBasis1, dominantDirTangentNormalized)) * rnm1 +
                        saturate(dot(rnmBasis2, dominantDirTangentNormalized)) * rnm2;
      half3 halfDir = Unity_SafeNormalize(dominantDirTangentNormalized - viewDirTangent);
      half NoH = saturate(dot(tangentNormal, halfDir));
      half spec = D_GGX(NoH, lerp(1, clampedRoughness, _SpecularRoughnessMod));
      directSpecular += spec * specColor * fresnel;
    }
    #endif
    
    #if defined(BAKERY_SH)
    {
      half3 dominantDir = half3(dot(nL1x, lumaConv), dot(nL1y, lumaConv), dot(L1z, lumaConv));
      half3 halfDir = Unity_SafeNormalize(normalize(dominantDir) + d.worldSpaceViewDir);
      half NoH = saturate(dot(o.Normal, halfDir));
      half spec = D_GGX(NoH, lerp(1, clampedRoughness, _SpecularRoughnessMod));
      half3 sh = L0 + dominantDir.x * L1x + dominantDir.y * L1y + dominantDir.z * L1z;
      dominantDir = normalize(dominantDir);
      directSpecular += max(spec * sh, 0.0) * fresnel;
    }
    #endif
  #endif
  
  // REFLECTIONS
  #if !defined(UNITY_PASS_FORWARDADD)
    half3 reflDir = reflect(-d.worldSpaceViewDir, o.Normal);
    reflDir = lerp(reflDir, o.Normal, rough * rough);
    
    Unity_GlossyEnvironmentData envData;
    envData.roughness = perceptualRoughness;
    envData.reflUVW = getBoxProjection(reflDir, d.worldSpacePosition.xyz, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin.xyz, unity_SpecCube0_BoxMax.xyz);
    
    half3 probe0 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(unity_SpecCube0), unity_SpecCube0_HDR, envData);
    indirectSpecular = probe0;
    
    #if defined(UNITY_SPECCUBE_BLENDING)
      UNITY_BRANCH
      if (unity_SpecCube0_BoxMin.w < 0.99999) {
        envData.reflUVW = getBoxProjection(reflDir, d.worldSpacePosition.xyz, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin.xyz, unity_SpecCube1_BoxMax.xyz);
        half3 probe1 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1, unity_SpecCube0), unity_SpecCube1_HDR, envData);
        indirectSpecular = lerp(probe1, probe0, unity_SpecCube0_BoxMin.w);
      }
    #endif
    
    half horizon = min(1 + dot(reflDir, o.Normal), 1);
    dfg.x *= saturate(pow(dot(indirectDiffuse, 1), _SpecOcclusion));
    indirectSpecular = indirectSpecular * horizon * horizon * energyCompensation * EnvBRDFMultiscatter(dfg, f0);
  
    #if defined(_MASKMAP_SAMPLED)
      indirectSpecular *= computeSpecularAO(NoV, o.Occlusion, perceptualRoughness * perceptualRoughness);
    #endif
  #endif
    
  #if defined(_INTEGRATE_CUSTOMGI) && !defined(UNITY_PASS_FORWARDADD)
    IntegrateCustomGI(d, o, indirectSpecular, indirectDiffuse); 
  #endif
  
  // FINAL COLOR
  FinalColor = half4(o.Albedo.rgb * (1 - o.Metallic) * (indirectDiffuse * occlusion + (pixelLight)) + indirectSpecular + directSpecular, o.Alpha);
  
  FinalColor.rgb += o.Emission;
}