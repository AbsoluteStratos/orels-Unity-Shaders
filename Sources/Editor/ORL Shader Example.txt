#S#Settings
Name "SHADER NAME"
Author "Your Name"
Version "1.0.0"
Template "ORL PBR Template.stemplate"
CustomEditor "Needle.MarkdownShaderGUI"

#S#Includes
"ORL Utility Functions.asset"
"self"
"ORL PBR Module.asset"

#S#Properties
[ToggleUI]UI_MainHeader("# My Awesome Settings", Int) = 0
_Level("Level", Range(0,1)) = 0
_Mask("Mask", 2D) = "black" {}
_Brightness("Brightness", Range(0,2)) = 1
_Cutoff("Cutoff", Range(0, 1)) = 0.5

#T#ShaderFeatures
#pragma shader_feature_local FANCY_FEATURE

#T#ShaderDefines
#define MY_THING

#T#ShaderTags
"Queue" = "AlphaTest" "RenderType"="TransparentCutout"

#T#PassTags
"MyTag"="MyValue"

#T#PassModifiers
Cull Off

#S#FragmentVariables
float _Level;
float4 _Mask_ST;

TEXTURE2D(_Mask);
SAMPLER(sampler_Mask);
// these macros are defined in the UnitySamplingLib.stemplate
// if you are using the ORL PBR Module - you have access to those

#T#FragmentFunction
void MyFragment() {
  half2 uv = d.uv0.xy * _Mask_ST.xy + _Mask_ST.zw;
  half mask = SAMPLE_TEXTURE2D(_Mask, sampler_Mask, uv).r;

  o.Albedo = mask * _Level;
}

#S#VertexVariables
float _Level;

#T#VertexFunction
void MyVertex() {
  vD.vertex.xyz += vD.normal * _Level * 0.1;
}

#S#ColorVariables
half _Brightness;

#T#ColorFunction
void MyColor() {
  FinalColor.rgb *= _Brightness;
}

#S#ShadowVariables
half _Cutoff;
TEXTURE2D(_Mask);
SAMPLER(sampler_Mask);

#T#ShadowFunction
void MyShadow() {
  half mainAlpha = SAMPLE_TEXTURE2D(_Mask, sampler_Mask, uv).a;
  if (mainAlpha < _Cutoff) {
    clip(-1);
  }
}