#S#Settings
Name "orels1/Toon/Modules/Shadow Rim"
Author "orels1"
Version "1.0.0"
Template "ORL Toon Template.stemplate"
CustomEditor "Needle.MarkdownShaderGUI"

#S#Includes
"ORL Utility Functions.asset"
"self"
"ORL Toon Module.asset"

#S#Properties
[ToggleUI]UI_RimShadowHeader("# Rim Shadow Settings", Int) = 0
_ShadowRimTint("Tint", Color) = (1,1,1,1)
_ShadowRimRange("Range", Range(0,1)) = 0.7
_ShadowRimThreshold("Threshold", Range(0,1)) = 0.1
_ShadowRimSharpness("Sarpness", Range(0,1)) = 0.3
_ShadowRimAlbedoTint("Albedo Tint", Range(0,1)) = 0

#S#FragmentVariables
half4 _ShadowRimTint;
half _ShadowRimRange;
half _ShadowRimThreshold;
half _ShadowRimSharpness;
half _ShadowRimAlbedoTint;

#T#FragmentFunction
void ToonShadowRimFragment() {
    #ifndef USING_DIRECTIONAL_LIGHT
        fixed3 lightDir = normalize(UnityWorldSpaceLightDir(d.worldSpacePosition));
    #else
        fixed3 lightDir = _WorldSpaceLightPos0.xyz;
    #endif
    half lightNoL = saturate(dot(GLOBAL_pixelNormal, lightDir));
    half SVDNoN = abs(dot(d.svdn, GLOBAL_pixelNormal));
    half shadowRimIntensity = saturate((1 - SVDNoN)) * pow(1 - lightNoL, _ShadowRimThreshold * 2);
    shadowRimIntensity = smoothstep(_ShadowRimRange - _ShadowRimSharpness, _ShadowRimRange + _ShadowRimSharpness, shadowRimIntensity);

    o.RimShadow = lerp(1, (_ShadowRimTint * lerp(1, o.Albedo.rgbb, _ShadowRimAlbedoTint)), shadowRimIntensity);
}